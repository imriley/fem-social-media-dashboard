{"version":3,"sources":["script.js"],"names":["darkBtn","document","getElementById","lightBtn","radioButtons","querySelectorAll","forEach","button","addEventListener","console","log","checked","setDarkMode","setLightMode","querySelector","classList","localStorage","setItem","colorModeFromLocalStorage","getItem","colorModeFromPreferences","window","matchMedia","matches","loadAndUpdateColor","click","event"],"mappings":"AAAA,aAAA,IAAMA,QAAUC,SAASC,eAAe,QAClCC,SAAWF,SAASC,eAAe,SACnCE,aAAeH,SAASI,iBAAiB,0BAM/CD,aAAaE,SAAQ,SAAAC,GACjBA,EAAOC,iBAAiB,SAAS,WAC7BC,QAAQC,IAAI,kBACZV,QAAQW,QAAUC,cAAgBC,qBAI1C,IAAMD,YAAc,WAChBX,SAASa,cAAc,QAAQC,UAAY,OAC3CC,aAAaC,QAAQ,YAAa,SAGhCJ,aAAe,WACjBZ,SAASa,cAAc,QAAQC,UAAY,QAC3CC,aAAaC,QAAQ,YAAa,UAGhCC,0BAA4B,WAC9B,OAAOF,aAAaG,QAAQ,cAG1BC,yBAA2B,WAC7B,OAAOC,OAAOC,WAAW,gCAAgCC,QAAU,OAAS,SAQ1EC,mBAAqB,WAGd,SADKN,6BAA+BE,4BAC3BpB,QAAQyB,QAAUtB,SAASsB,SAOjDJ,OAAOC,WAAW,gCAAgCd,iBAAiB,UAAU,SAACkB,GAC1EA,EAAMH,QAAUvB,QAAQyB,QAAUtB,SAASsB,WAI/CD","file":"script.js","sourcesContent":["const darkBtn = document.getElementById('dark');\r\nconst lightBtn = document.getElementById('light');\r\nconst radioButtons = document.querySelectorAll('.toggle__wrapper input');\r\n\r\n/*\r\nWhen the radio buttons are clicked, it checks which\r\nradio button is checked and changes the color mode accordingly\r\n*/\r\nradioButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n        console.log('button clicked');\r\n        darkBtn.checked ? setDarkMode() : setLightMode();\r\n    });\r\n});\r\n\r\nconst setDarkMode = () => {\r\n    document.querySelector('body').classList = 'dark';\r\n    localStorage.setItem('colorMode', 'dark');\r\n};\r\n\r\nconst setLightMode = () => {\r\n    document.querySelector('body').classList = 'light';\r\n    localStorage.setItem('colorMode', 'light');\r\n};\r\n\r\nconst colorModeFromLocalStorage = () => {\r\n    return localStorage.getItem('colorMode');\r\n};\r\n\r\nconst colorModeFromPreferences = () => {\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light' // light is default if preference does not match anything\r\n};\r\n\r\n/*\r\nLoads the color mode from local storage, if the page is loaded for the first time\r\nthe color mode set on the preference is used and color mode in the local storage\r\nis set as 'default'\r\n*/\r\nconst loadAndUpdateColor = () => {\r\n    // local storage has precedence over the prefers-color-scheme\r\n    const color = colorModeFromLocalStorage() || colorModeFromPreferences();\r\n    color == 'dark' ? darkBtn.click() : lightBtn.click();\r\n};\r\n\r\n/*\r\nThis event is emitted when the prefers-color-scheme is changed\r\nIt also reflects the media query, if it matches, then the new color is dark else it is light\r\n*/\r\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (event) => {\r\n    event.matches ? darkBtn.click() : lightBtn.click();\r\n});\r\n\r\n// Loads the color mode on startup\r\nloadAndUpdateColor();"]}